import asyncio
import websockets
import json
import time

MOEDAS = ["BTC_USDT", "DOGE_USDT", "GALA_USDT"]
URL_MEXC = "wss://contract.mexc.com/edge"

# Taxas (em decimal)
TAXA_BINANCE = 0.002  # 0.075% usando BNB
TAXA_MEXC = 0.0005      # 0.05% Spot Taker

# Armazena últimos preços
precos_mexc = {}
precos_binance = {}

# Fila de preços (origem, par, preço)
fila_precos = asyncio.Queue()


async def ping(ws):
    while True:
        await asyncio.sleep(15)
        try:
            await ws.send(json.dumps({"method": "ping"}))
        except:
            break


async def handler_mexc(simbolos):
    async with websockets.connect(URL_MEXC) as ws:
        print("[MEXC] Conectado")

        # Subscrição de todos os pares Spot
        for simbolo in simbolos:
            await ws.send(json.dumps({
                "method": "sub.ticker",
                "param": {"symbol": simbolo}
            }))

        asyncio.create_task(ping(ws))

        while True:
            try:
                msg = await ws.recv()
                data = json.loads(msg)

                if data.get("channel") == "push.ticker" and "data" in data:
                    simbolo = data.get("symbol")
                    preco = float(data["data"]["lastPrice"])
                    await fila_precos.put(("MEXC", simbolo, preco))
            except Exception as e:
                print(f"[MEXC] Erro: {e}")
                break


async def handler_binance(simbolo):
    par_binance = simbolo.replace("_", "").lower()
    url = f"wss://stream.binance.com:9443/ws/{par_binance}@trade"

    async with websockets.connect(url) as ws:
        print(f"[Binance] Conectado ao par {simbolo}")
        asyncio.create_task(ping(ws))

        while True:
            try:
                msg = await ws.recv()
                data = json.loads(msg)

                if "p" in data:
                    preco = float(data["p"])
                    await fila_precos.put(("BINANCE", simbolo, preco))
            except Exception as e:
                print(f"[Binance {simbolo}] Erro: {e}")
                break


async def processador_spreads():
    ultima_impressao = {}

    while True:
        origem, simbolo, preco = await fila_precos.get()

        if origem == "MEXC":
            precos_mexc[simbolo] = preco
        elif origem == "BINANCE":
            precos_binance[simbolo] = preco

        if simbolo in precos_mexc and simbolo in precos_binance:
            preco_mexc = precos_mexc[simbolo]
            preco_binance = precos_binance[simbolo]

            agora = time.time()
            if agora - ultima_impressao.get(simbolo, 0) > 2:
                ultima_impressao[simbolo] = agora

                # Spread líquido MEXC -> Binance
                custo_compra_mexc = preco_mexc * (1 + TAXA_MEXC)
                valor_venda_binance = preco_binance * (1 - TAXA_BINANCE)
                spread_liquido_mb = (valor_venda_binance - custo_compra_mexc) / custo_compra_mexc * 100

                # Spread líquido Binance -> MEXC
                custo_compra_binance = preco_binance * (1 + TAXA_BINANCE)
                valor_venda_mexc = preco_mexc * (1 - TAXA_MEXC)
                spread_liquido_bm = (valor_venda_mexc - custo_compra_binance) / custo_compra_binance * 100

                if spread_liquido_mb > 0:
                    print(f"⚡ {simbolo}: COMPRAR MEXC ({preco_mexc}) e VENDER BINANCE ({preco_binance}) | Spread líquido: {spread_liquido_mb:.2f}%")
                elif spread_liquido_bm > 0:
                    print(f"⚡ {simbolo}: COMPRAR BINANCE ({preco_binance}) e VENDER MEXC ({preco_mexc}) | Spread líquido: {spread_liquido_bm:.2f}%")

async def main():
    tarefas = [
        handler_mexc(MOEDAS),
        processador_spreads()
    ]

    for simbolo in MOEDAS:
        tarefas.append(handler_binance(simbolo))

    await asyncio.gather(*tarefas)


if __name__ == "__main__":
    asyncio.run(main())
